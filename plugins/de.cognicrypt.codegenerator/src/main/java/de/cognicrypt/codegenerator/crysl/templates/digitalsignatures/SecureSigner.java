/********************************************************************************
 * Copyright (c) 2015-2021 TU Darmstadt, Paderborn University
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 ********************************************************************************/

package de.cognicrypt.codegenerator.crysl.templates.digitalsignatures;

import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SignatureException;
import java.util.Base64;

import de.cognicrypt.codegenerator.crysl.CrySLCodeGenerator;

/** * This Class provides secure way to sign and verify a message.
 */
public class SecureSigner {

	/**
	 * Generates a key pair to sign a message or verify existing signatures.
	 *
	 * @return the key pair. Generated by RSA algorithm with size 4096.
	 * @throws NoSuchAlgorithmException This exception is thrown when the proper cryptographic algorithm for keyPairGenerator is not provided.
	 * @throws GeneralSecurityException the general security exception.
	 */
	public static java.security.KeyPair getKey() throws NoSuchAlgorithmException {
		java.security.KeyPair pair = null;
		CrySLCodeGenerator.getInstance().includeClass("java.security.KeyPairGenerator").addParameter(pair, "kp").generate();
		return pair;
	}

	/**
	 * Converts message to bytes and signs it (with SHA256withRSA algorithm) with the private key from the key pair, then encodes
	 * the result with Base64 to string. Signature helps to ensure that the source of the message is authorized.
	 *
	 * @param msg the string message to be signed. It will be encoded in UTF_8.
	 * @param keyPair the method uses the private part of it to sign the message.
	 * @param offset offset in result object where the signature is stored.
	 * @param len the number of bytes in the result object that is alloted for the signature. 
	 * @return the signed message, converted from bytes with Base64 to string.
	 * @throws NoSuchAlgorithmException This exception is thrown if no provider supports a SignatureSpi implementation for the specified algorithm.
	 * @throws InvalidKeyException This exception is thrown in case of invalid Keys (invalid encoding, wrong length, uninitialized, etc).
	 * @throws SignatureException  This exception is thrown if the signature object is not initialized properly, if this signature algorithm is unable to process the input data provided, or if len is less than the actual signature length.
	 * @throws GeneralSecurityException This exception is thrown if a security-related exception happens that extends this general exception.
	 */
	public static java.lang.String sign(java.lang.String msg, java.security.KeyPair keyPair) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {
		byte[] msgBytes = msg.getBytes(StandardCharsets.UTF_8);
		byte[] res = null;
		java.security.PrivateKey privKey = keyPair.getPrivate();
		CrySLCodeGenerator.getInstance().includeClass("java.security.Signature").addParameter(privKey, "priv").addParameter(msgBytes, "inpba").addParameter(res, "out").generate();
		return Base64.getEncoder().encodeToString(res);
	}
	
	/**
	 * Decodes the message to bytes (with Base64) and verifies if the message is from an authenticated person using the public part of key pair.
	 *
	 * @param msg the String message (it will be decoded with Base64) to verify its signature.
	 * @param keyPair to retrieve public key.
	 * @return true, if the message signature is verified.
	 * @throws NoSuchAlgorithmException This exception is thrown when the proper cryptographic algorithm is not provided.
	 * @throws InvalidKeyException This exception is thrown in case of invalid Keys (invalid encoding, wrong length, uninitialized, etc).
	 * @throws SignatureException This exception is thrown if the signature object is not initialized properly, if this signature algorithm is unable to process the input data provided.
	 * @throws GeneralSecurityException This exception is thrown if a security-related exception happens that extends this general exception.
	 */
	public static boolean verify(java.lang.String msg, java.security.KeyPair keyPair) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {
		boolean res = false;
		byte[] msgBytes = Base64.getDecoder().decode(msg);
		java.security.PublicKey pubKey = keyPair.getPublic();
		CrySLCodeGenerator.getInstance().includeClass("java.security.Signature").addParameter(pubKey, "pub").addParameter(msgBytes, "sign").addParameter(res, "verified").generate();
		return res;
	}

}
