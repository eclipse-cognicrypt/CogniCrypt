/**
 * generated by Xtext 2.25.0
 */
package de.cognicrypt.order.editor.statemachine.impl;

import de.cognicrypt.order.editor.statemachine.Event;
import de.cognicrypt.order.editor.statemachine.FinalState;
import de.cognicrypt.order.editor.statemachine.State;
import de.cognicrypt.order.editor.statemachine.Statemachine;
import de.cognicrypt.order.editor.statemachine.StatemachinePackage;
import de.cognicrypt.order.editor.statemachine.Transition;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Statemachine</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cognicrypt.order.editor.statemachine.impl.StatemachineImpl#getEvents <em>Events</em>}</li>
 *   <li>{@link de.cognicrypt.order.editor.statemachine.impl.StatemachineImpl#getStates <em>States</em>}</li>
 *   <li>{@link de.cognicrypt.order.editor.statemachine.impl.StatemachineImpl#getFinalstates <em>Finalstates</em>}</li>
 *   <li>{@link de.cognicrypt.order.editor.statemachine.impl.StatemachineImpl#getTransitions <em>Transitions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StatemachineImpl extends MinimalEObjectImpl.Container implements Statemachine
{
  /**
   * The cached value of the '{@link #getEvents() <em>Events</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvents()
   * @generated
   * @ordered
   */
  protected EList<Event> events;

  /**
   * The cached value of the '{@link #getStates() <em>States</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStates()
   * @generated
   * @ordered
   */
  protected EList<State> states;

  /**
   * The cached value of the '{@link #getFinalstates() <em>Finalstates</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFinalstates()
   * @generated
   * @ordered
   */
  protected EList<FinalState> finalstates;

  /**
   * The cached value of the '{@link #getTransitions() <em>Transitions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransitions()
   * @generated
   * @ordered
   */
  protected EList<Transition> transitions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StatemachineImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return StatemachinePackage.Literals.STATEMACHINE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Event> getEvents()
  {
    if (events == null)
    {
      events = new EObjectContainmentEList<Event>(Event.class, this, StatemachinePackage.STATEMACHINE__EVENTS);
    }
    return events;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<State> getStates()
  {
    if (states == null)
    {
      states = new EObjectContainmentEList<State>(State.class, this, StatemachinePackage.STATEMACHINE__STATES);
    }
    return states;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FinalState> getFinalstates()
  {
    if (finalstates == null)
    {
      finalstates = new EObjectContainmentEList<FinalState>(FinalState.class, this, StatemachinePackage.STATEMACHINE__FINALSTATES);
    }
    return finalstates;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Transition> getTransitions()
  {
    if (transitions == null)
    {
      transitions = new EObjectContainmentEList<Transition>(Transition.class, this, StatemachinePackage.STATEMACHINE__TRANSITIONS);
    }
    return transitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case StatemachinePackage.STATEMACHINE__EVENTS:
        return ((InternalEList<?>)getEvents()).basicRemove(otherEnd, msgs);
      case StatemachinePackage.STATEMACHINE__STATES:
        return ((InternalEList<?>)getStates()).basicRemove(otherEnd, msgs);
      case StatemachinePackage.STATEMACHINE__FINALSTATES:
        return ((InternalEList<?>)getFinalstates()).basicRemove(otherEnd, msgs);
      case StatemachinePackage.STATEMACHINE__TRANSITIONS:
        return ((InternalEList<?>)getTransitions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case StatemachinePackage.STATEMACHINE__EVENTS:
        return getEvents();
      case StatemachinePackage.STATEMACHINE__STATES:
        return getStates();
      case StatemachinePackage.STATEMACHINE__FINALSTATES:
        return getFinalstates();
      case StatemachinePackage.STATEMACHINE__TRANSITIONS:
        return getTransitions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case StatemachinePackage.STATEMACHINE__EVENTS:
        getEvents().clear();
        getEvents().addAll((Collection<? extends Event>)newValue);
        return;
      case StatemachinePackage.STATEMACHINE__STATES:
        getStates().clear();
        getStates().addAll((Collection<? extends State>)newValue);
        return;
      case StatemachinePackage.STATEMACHINE__FINALSTATES:
        getFinalstates().clear();
        getFinalstates().addAll((Collection<? extends FinalState>)newValue);
        return;
      case StatemachinePackage.STATEMACHINE__TRANSITIONS:
        getTransitions().clear();
        getTransitions().addAll((Collection<? extends Transition>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case StatemachinePackage.STATEMACHINE__EVENTS:
        getEvents().clear();
        return;
      case StatemachinePackage.STATEMACHINE__STATES:
        getStates().clear();
        return;
      case StatemachinePackage.STATEMACHINE__FINALSTATES:
        getFinalstates().clear();
        return;
      case StatemachinePackage.STATEMACHINE__TRANSITIONS:
        getTransitions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case StatemachinePackage.STATEMACHINE__EVENTS:
        return events != null && !events.isEmpty();
      case StatemachinePackage.STATEMACHINE__STATES:
        return states != null && !states.isEmpty();
      case StatemachinePackage.STATEMACHINE__FINALSTATES:
        return finalstates != null && !finalstates.isEmpty();
      case StatemachinePackage.STATEMACHINE__TRANSITIONS:
        return transitions != null && !transitions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //StatemachineImpl
